# Import data 
>> dataset= xlsread("all wells.xlsx",1);
>> x= dataset(:,1:3);
>> y= dataset(:,4);
>> x=x';
>> y=y';

% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
%   x - input data.
%   y - target data.

x = x;
t = y;

% Choose a Training Function
% For a list of all training functions type: help nntrain
trainFcn = 'trainlm';  % Levenberg-Marquardt backpropagation.

% Create a Fitting Network
hiddenLayerSize =16;
net = fitnet(hiddenLayerSize,trainFcn);
net.layers{1}.transferFcn = 'tansig';   % hidden layer 1
net.layers{2}.transferFcn = 'purelin';  % output layer


% Setup Division of Data for Training, Validation, and Testing
% For a list of all data division functions type: help nndivision
net.divideFcn = 'dividerand'; % Divide data randomly
net.divideMode = 'sample'; % Divide up every sample
net.divideParam.trainRatio = 65/100;
net.divideParam.valRatio = 17.5/100;
net.divideParam.testRatio = 17.5/100;

#Set the random number generator 
rng(20); 


% Choose a Performance Function
net.performFcn = 'mse'; % Mean Squared Error

% Choose Plot Functions
net.plotFcns = {'plotperform','plottrainstate','ploterrhist', 'plotregression', 'plotfit'};

% Train the Network
[net,tr] = train(net,x,t);

# identify the specified weights and biases for the hidden and outputlayers
w1 = net.IW{1}; 
w2 = net.LW{2}; 
b1 = net.b{1}; 
b2 = net.b{2}; 

% Test the Network
y = net(x);
e = gsubtract(t, y);
performance = perform(net, t, y)

% Recalculate Training, Validation and test Performance
trainTargets = t .* tr.trainMask{1};
valTargets = t .* tr.valMask{1};
testTargets = t .* tr.testMask{1};
trainPerformance = perform(net,trainTargets,y)
valPerformance = perform(net,valTargets,y)
testPerformance = perform(net,testTargets,y)


% View the Network
View (net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotregression(t,y)
%figure, plotfit(net,x,t)

